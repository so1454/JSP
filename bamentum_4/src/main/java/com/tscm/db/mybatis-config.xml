<?xml version="1.0" encoding="UTF-8" ?>

<!-- mybatis 설정 파일임을 알려주는 스키마 구간
	스키마 = (xml 안에서 사용할수 있는 태그들의 정의) -->
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- dtd : document type definition -->

<!-- 1) mybatis 설정을 잡아주는 구간. -->
<configuration>

<!-- 2) 데이터베이스들을 설정하는 구간
		프로젝트에서 여러개의 DB를 사용하는 경우도 있음. -->
  <environments default="development">
  
<!-- 3) 한개의 데이터베이스에 대한 설정을 하는 구간 -->
    <environment id="development">
    
<!-- 4) 트랜잭션의 관리 타입 지정, 
		트랜잭션 = 쪼갤수 없는 업무의 최소단위. 
		JDBC : COMMIT, ROLLBACK mybatis 자체적으로 관리.
		MANAGED : commit, rollback 서버에서 관리 (자바 컨테이너)
-->
      <transactionManager type="JDBC"/>
      
<!-- 5) DB 연결 설정
		Connection pool : 커넥션 풀은 데이터베이스와 연결된 커넥션을 미리 만들어 놓고 이를 pool로 관리하는 것이다 
					 필요할 때마다 커넥션 풀의 커넥션을 이용하고 반환하는 기법이다.		
					 이처럼 미리 만들어 놓은 커넥션을 이용하면 Connection에 필요한 비용을 줄일 수 있다
					 보통은 3~5개 정도 미리 만들어 놓는다.
		- POOLED : 커넥션 객체를 미리 생성해 놓고 요청시 반환.
		- UNPOOLED : 요청할때마다 커넥션 객체를 생성
		- JNDI : 
		
		!!! Connection Pool !!!
-->

      <dataSource type="POOLED">
      
<!-- 6) Connection 객체를 생성할때 필요한 내용들을 정리하는 구간
		- driver, url, 계정정보(username, password)
-->
        <property name="driver" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
        <property name="username" value="hr"/>
        <property name="password" value="hr"/>
      </dataSource>
    </environment>
    
  </environments>
  
<!-- 7) SQL 구문을 가지고 있는 mapper 파일들중 어떤 걸 사용할 건지 정의하는 구간 -->
  <mappers>
<!-- 8) 한개의 mapper 파일의 경로 -->
    <mapper resource="com/tscm/db/bmt_Mapper.xml"/>
  </mappers>
</configuration>
